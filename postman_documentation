ChatGPT Assistant API With AI Agents Documentation

Base URL: http://localhost:5000/api

Authentication
1. Login

Endpoint: POST /login
Description: Authenticate user with email and password. Returns JWT token on success.

Request Body (JSON):

{
    "email": "newuser123@gmail.com",
    "password": "test"
}


Responses:

200 OK – Successfully logged in

401 Unauthorized – Invalid credentials

2. Signup

Endpoint: POST /signup
Description: Register a new user.

Request Body (JSON):

{
    "username": "test",
    "email": "test@gmail.com",
    "password": "test"
}


Responses:

201 Created – User successfully registered

400 Bad Request – Invalid or missing fields

Chat
3. Send a Chat Message

Endpoint: POST /chat
Description: Send a message to the chat system.

Request Body (JSON):

{
    "message": "okay tell me about npm, bun and yarn? theme pref"
}


Responses:

200 OK – Returns chatbot response

4. Get Chat History

Endpoint: GET /chat/history
Description: Fetch the chat history for the current user.

Responses:

200 OK – Returns a list of previous chat messages

5. Search Chat

Endpoint: GET /chat/search
Description: Search messages by keyword.

Query Parameter:

search – Keyword to search

Example:
GET /chat/search?search=node

Responses:

200 OK – Returns matching messages

6. Start New Chat

Endpoint: POST /chat/new
Description: Create a new chat session.

Request Body: Empty

Responses:

201 Created – New chat session created

7. Delete Chat History

Endpoint: DELETE /chat/history
Description: Deletes all chat messages.

Responses:

200 OK – Chat history deleted

8. Delete Particular Message

Endpoint: DELETE /message/:id
Description: Delete a specific message by ID.

Path Parameter:

id – Message ID to delete

Example: DELETE /message/1

Responses:

200 OK – Message deleted

404 Not Found – Message not found

User Preferences
9. Get Theme / Front Preferences

Endpoint: GET /user/preferences
Description: Fetch user preferences for theme and font.

Responses:

200 OK – Returns current preferences

10. Update Theme / Front Preferences

Endpoint: POST /user/preferences
Description: Update user theme and font preferences.

Request Body (JSON):

{
    "preferences": {
        "theme": "dark",
        "font": "serif"
    }
}


Responses:

200 OK – Preferences updated

AI Agent
11. Tester Agent: Test Case Generation

Endpoint: POST /chat/agent/tester/test_case_generator
Description: Generate automated test cases for a given feature.

Request Body (JSON):

{
    "input": {
        "feature": "Password Reset",
        "requirements": [
            "User must request a password reset with a registered email",
            "System must send a reset link to the registered email",
            "Reset link must expire in 15 minutes",
            "New password must be at least 8 characters"
        ],
        "platform": "Web",
        "data_samples": [
            "registered_user@example.com",
            "unregistered_user@example.com"
        ]
    }
}

12. Developer Agent: Stack Recommendation

Endpoint: POST /agents/developer/stack_agent
Description: Recommend technology stack based on use-case and team skill.

Request Body (JSON):

{
    "input": {
        "feature": "Recommend Stack",
        "requirements": [
            "Suggest stack with rationale",
            "Include migration notes",
            "Consider team skill and constraints"
        ],
        "platform": "Web App",
        "data_samples": [
            "Use-case: E-commerce platform",
            "Team skill: Node.js, React"
        ]
    }
}

13. Agent History

Endpoint: GET /agents/history
Description: Fetch history of agent requests and responses.

Responses:

200 OK – Returns list of past agent interactions