API Documentation – ChatGPT Assistant

Base URL: http://localhost:5000

🔐 Authentication
📝 Signup

POST /api/signup

Creates a new user account.

Request Body (JSON)
{
  "username": "newuser12",
  "email": "newuser12@gmail.com",
  "password": "test"
}

Response

200 OK – Signup successful

409 Conflict – Username already exists

400 Bad Request – Missing fields

🔑 Login

POST /api/login

Authenticates a user.

Request Body (JSON)
{
  "username": "test",
  "password": "test"
}

Response

200 OK – Login successful

401 Unauthorized – Invalid credentials

400 Bad Request – Missing fields

🚪 Logout

POST /api/logout

Logs out the current user and clears session.

Response

200 OK – Logged out

500 Server Error – Logout failed

🔒 Check Auth

GET /api/check-auth

Checks if the user is authenticated.

Response
{
  "authenticated": true,
  "user": {
    "username": "test",
    "email": "test@example.com"
  }
}

🙍‍♂️ User
👤 Get Current User

GET /api/user

Returns the authenticated user's data.

Response
{
  "username": "test",
  "email": "test@example.com",
  "createdAt": "2025-08-22T10:00:00Z"
}

🎨 Update Theme Preference

PUT /api/user/preferences

Updates user theme preference (e.g., light/dark).

Request Body (JSON)
{
  "theme": "dark"
}


✅ Assumes you store preferences in the Couchbase user doc (extend this feature in your backend if not yet implemented).

💬 Chat
🧠 Send a Chat Message

POST /api/chat

Sends a message to the chatbot and receives a response. Requires authentication.

Request Body (JSON)
{
  "message": "teach me about node js today"
}

Response
{
  "reply": "Sure! Node.js is a runtime built on Chrome's V8 JavaScript engine..."
}

🕘 Get Chat History

GET /api/chat/history

🔧 [Not implemented in your shared code, but listed in your doc]
You’d need to add a route to retrieve chat history from Redis (key: chat_session:<username>).

🔎 Search Chat History

GET /api/chat/search?query=node

🔧 [Also not implemented in current code]
You can implement this by querying Redis history and filtering messages containing the query string.

🆕 Start New Chat Session

POST /api/chat/new

🔧 [Also not implemented yet]
Could be implemented by clearing the Redis chat session key for the user.

🛠️ Routes To Be Implemented (Optional Enhancements)
Route	Method	Purpose
/api/chat/history	GET	Retrieve full chat history
/api/chat/search	GET	Search chat history
/api/chat/new	POST	Start new empty chat session
/api/user/preferences	PUT	Save user preferences (e.g., theme)
🧪 Test Route

GET /ping

Check if server is running.

Response
{ "message": "pong" }

🧾 Notes

All chat APIs require the user to be authenticated via session.

Redis is used to store chat history with keys like chat_session:<username>.

Couchbase is used for user storage.

Google Generative AI (gemini-1.5-flash) is used to generate responses.